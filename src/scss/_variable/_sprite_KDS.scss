/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$sp-i-bottom-info-name: 'sp-i-bottomInfo';
$sp-i-bottom-info-x: 0px;
$sp-i-bottom-info-y: 0px;
$sp-i-bottom-info-offset-x: 0px;
$sp-i-bottom-info-offset-y: 0px;
$sp-i-bottom-info-width: 43px;
$sp-i-bottom-info-height: 37px;
$sp-i-bottom-info-total-width: 43px;
$sp-i-bottom-info-total-height: 69px;
$sp-i-bottom-info-image: '../img/sprite_KDS.png';
$sp-i-bottom-info: (0px, 0px, 0px, 0px, 43px, 37px, 43px, 69px, '../img/sprite_KDS.png', 'sp-i-bottomInfo', );
$sp-i-header-arrow-maps-name: 'sp-i-header-arrow-maps';
$sp-i-header-arrow-maps-x: 0px;
$sp-i-header-arrow-maps-y: 42px;
$sp-i-header-arrow-maps-offset-x: 0px;
$sp-i-header-arrow-maps-offset-y: -42px;
$sp-i-header-arrow-maps-width: 20px;
$sp-i-header-arrow-maps-height: 27px;
$sp-i-header-arrow-maps-total-width: 43px;
$sp-i-header-arrow-maps-total-height: 69px;
$sp-i-header-arrow-maps-image: '../img/sprite_KDS.png';
$sp-i-header-arrow-maps: (0px, 42px, 0px, -42px, 20px, 27px, 43px, 69px, '../img/sprite_KDS.png', 'sp-i-header-arrow-maps', );
$sp-i-bottom-info-2x-name: 'sp-i-bottomInfo@2x';
$sp-i-bottom-info-2x-x: 0px;
$sp-i-bottom-info-2x-y: 0px;
$sp-i-bottom-info-2x-offset-x: 0px;
$sp-i-bottom-info-2x-offset-y: 0px;
$sp-i-bottom-info-2x-width: 86px;
$sp-i-bottom-info-2x-height: 74px;
$sp-i-bottom-info-2x-total-width: 86px;
$sp-i-bottom-info-2x-total-height: 138px;
$sp-i-bottom-info-2x-image: '../img/sprite_KDS@2x.png';
$sp-i-bottom-info-2x: (0px, 0px, 0px, 0px, 86px, 74px, 86px, 138px, '../img/sprite_KDS@2x.png', 'sp-i-bottomInfo@2x', );
$sp-i-header-arrow-maps-2x-name: 'sp-i-header-arrow-maps@2x';
$sp-i-header-arrow-maps-2x-x: 0px;
$sp-i-header-arrow-maps-2x-y: 84px;
$sp-i-header-arrow-maps-2x-offset-x: 0px;
$sp-i-header-arrow-maps-2x-offset-y: -84px;
$sp-i-header-arrow-maps-2x-width: 40px;
$sp-i-header-arrow-maps-2x-height: 54px;
$sp-i-header-arrow-maps-2x-total-width: 86px;
$sp-i-header-arrow-maps-2x-total-height: 138px;
$sp-i-header-arrow-maps-2x-image: '../img/sprite_KDS@2x.png';
$sp-i-header-arrow-maps-2x: (0px, 84px, 0px, -84px, 40px, 54px, 86px, 138px, '../img/sprite_KDS@2x.png', 'sp-i-header-arrow-maps@2x', );
$spritesheet-width: 43px;
$spritesheet-height: 69px;
$spritesheet-image: '../img/sprite_KDS.png';
$spritesheet-sprites: ($sp-i-bottom-info, $sp-i-header-arrow-maps, );
$spritesheet: (43px, 69px, '../img/sprite_KDS.png', $spritesheet-sprites, );
$retina-spritesheet-width: 86px;
$retina-spritesheet-height: 138px;
$retina-spritesheet-image: '../img/sprite_KDS@2x.png';
$retina-spritesheet-sprites: ($sp-i-bottom-info-2x, $sp-i-header-arrow-maps-2x, );
$retina-spritesheet: (86px, 138px, '../img/sprite_KDS@2x.png', $retina-spritesheet-sprites, );

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
$sp-i-bottom-info-group-name: 'sp-i-bottomInfo';
$sp-i-bottom-info-group: ('sp-i-bottomInfo', $sp-i-bottom-info, $sp-i-bottom-info-2x, );
$sp-i-header-arrow-maps-group-name: 'sp-i-header-arrow-maps';
$sp-i-header-arrow-maps-group: ('sp-i-header-arrow-maps', $sp-i-header-arrow-maps, $sp-i-header-arrow-maps-2x, );
$retina-groups: ($sp-i-bottom-info-group, $sp-i-header-arrow-maps-group, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
